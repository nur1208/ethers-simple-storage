const ethers = require("ethers");
const fs = require("fs");
async function main() {
  console.log("something");
  //   http://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(
    "http://127.0.0.1:7545"
  );

  const wallet = new ethers.Wallet(
    "6ea23d8dacbcbee5951acabaca50b25873c4dc0a23ab6d0bdd35c29027e0926a",
    provider
  );
  const abi = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.abi",
    "utf-8"
  );

  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );

  const contractFactory = new ethers.ContractFactory(
    abi,
    binary,
    wallet
  );
  console.log("Deploying, please wait...");
  const contract = await contractFactory.deploy();

  const deploymentReceipt =
    await contract.deployTransaction.wait(1);
  console.log(deploymentReceipt);

  //   console.log("let's deploy with only transaction data!");

  //   const nonce = await wallet.getTransactionCount();
  //   const tx = {
  //     nonce,
  //     gasPrice: 20000000000,
  //     gasLimit: 1000000,
  //     to: null,
  //     value: 0,
  //     data: "0x608060405234801561001057600080fd5b506107bd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a3578063795fff1d146100d35780638bab8dd5146100ef5780639e7a13ad1461011f575b600080fd5b61006f610150565b60405161007c9190610576565b60405180910390f35b61008d610159565b60405161009a9190610576565b60405180910390f35b6100bd60048036038101906100b891906104b9565b61015f565b6040516100ca9190610576565b60405180910390f35b6100ed60048036038101906100e8919061045d565b610172565b005b61010960048036038101906101049190610414565b610202565b6040516101169190610576565b60405180910390f35b610139600480360381019061013491906104b9565b610230565b604051610147929190610591565b60405180910390f35b60008054905090565b60005481565b6000816000819055506000549050919050565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101d89291906102ec565b505050806002836040516101ec919061055f565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061024057600080fd5b90600052602060002090600202016000915090508060000154908060010180546102699061068a565b80601f01602080910402602001604051908101604052809291908181526020018280546102959061068a565b80156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b5050505050905082565b8280546102f89061068a565b90600052602060002090601f01602090048101928261031a5760008555610361565b82601f1061033357805160ff1916838001178555610361565b82800160010185558215610361579182015b82811115610360578251825591602001919060010190610345565b5b50905061036e9190610372565b5090565b5b8082111561038b576000816000905550600101610373565b5090565b60006103a261039d846105e6565b6105c1565b9050828152602081018484840111156103be576103bd610750565b5b6103c9848285610648565b509392505050565b600082601f8301126103e6576103e561074b565b5b81356103f684826020860161038f565b91505092915050565b60008135905061040e81610770565b92915050565b60006020828403121561042a5761042961075a565b5b600082013567ffffffffffffffff81111561044857610447610755565b5b610454848285016103d1565b91505092915050565b600080604083850312156104745761047361075a565b5b600083013567ffffffffffffffff81111561049257610491610755565b5b61049e858286016103d1565b92505060206104af858286016103ff565b9150509250929050565b6000602082840312156104cf576104ce61075a565b5b60006104dd848285016103ff565b91505092915050565b60006104f182610617565b6104fb8185610622565b935061050b818560208601610657565b6105148161075f565b840191505092915050565b600061052a82610617565b6105348185610633565b9350610544818560208601610657565b80840191505092915050565b6105598161063e565b82525050565b600061056b828461051f565b915081905092915050565b600060208201905061058b6000830184610550565b92915050565b60006040820190506105a66000830185610550565b81810360208301526105b881846104e6565b90509392505050565b60006105cb6105dc565b90506105d782826106bc565b919050565b6000604051905090565b600067ffffffffffffffff8211156106015761060061071c565b5b61060a8261075f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561067557808201518184015260208101905061065a565b83811115610684576000848401525b50505050565b600060028204905060018216806106a257607f821691505b602082108114156106b6576106b56106ed565b5b50919050565b6106c58261075f565b810181811067ffffffffffffffff821117156106e4576106e361071c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107798161063e565b811461078457600080fd5b5056fea2646970667358221220cf1411fde942452fa5451dee34014985c33d6ebf6bc9dc93a6a89b6efb9f8e5e64736f6c63430008070033",
  //     chainId: 1337,
  //   };

  //   const sentTxRespons = await wallet.sendTransaction(tx);
  //   await sentTxRespons.wait(1);
  //   console.log(sentTxRespons);

  const currentFavoriteNumber = await contract.retrieve();
  console.log({
    currentFavoriteNumber: currentFavoriteNumber.toString(),
  });
}

main()
  .then(() => process.exit(0))
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });
